What is the theoretical worst-case running time of the algorithm you implemented
 (i.e. in Î˜-notation), expressed in terms of the number of words n in the input
 f
 ile? Justify your answer.

 # Theoretical Worst-Case Running Time of the Algorithm
 The algorithm uses presorting to find anagram sets efficiently.
 The worst-case time complexity is O(nlogn)

**Reasoning:**
------------------------
The program's efficiency mainly depends on the sorting and insertion operations
- The algorithm first reads the input file and takes each word in one by one.
- Each word is then sorted using Arrays.sort() which has a time complexity of O(mlogm) given that m is the number of characters in the word.
- The algorithm then uses a HashMap to store the sorted words as a key and their original word into a set value.
- Each insertion into the HashMap takes O(1) time, so adding each word to the HashMap takes O(n)
- The sorting and adding of each word to the HashMap takes O(n*mlogm) time in total, given that n is the number of words in the input and m and the number of characters in each word.

The printing and writing of the anagram sets takes O(n) time, as each word is printed once. This does not affect the time complexity of the algorithm of the algorithm, as it is dominated by the sorting and adding of each word to the HashMap.
Additionally, the removal of anagram sets with less than 2 words takes O(n) time, as each word is checked once.

The whole program's time complexity is still therefore O(n*mlogm)